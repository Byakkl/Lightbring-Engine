This is a frequently updated file to track progress and plan changes

INPROGRESS:
2024-05-24
- ENGINE: Build hardware input system using GLFW

TODO:
- ENGINE: Clarity of degrees/radians for rotation and transform
- ENGINE: Define standards for method parameter naming
- VULKAN: Decide on a better method for storing and referencing queue family indices than a vector (requestQueueFamilies, queueFamilies). 
    A fetch method to more explicitly declare what to fetch instead of magic index numbers. Potentially a map structure
- VULKAN: Revisit command pool creation to more directly control the number of buffers. (Not all queues likely need a number of buffers equal to the number of frames in flight)
- VULKAN: Revisit copyBuffer method to assign fences to allow simultaneous transfer calls
- VULKAN: Change the call to vkAllocateMemory in createBuffer to a custom allocator that utilizes the offset parameters to allow for numerous simultaneous allocations. 
    https://vulkan-tutorial.com/en/Vertex_buffers/Staging_buffer#:~:text=more%20complex%20geometry.-,Conclusion,-It%20should%20be
- VULKAN: Create command pool with the flag VK_COMMAND_POOL_TRANSIENT_BIT for short lived commands such as the staging buffer used in copyBuffer
- VULKAN: Look into combining vertex and index buffers using the offset parameters to better manage vkAllocateMemory
- VULKAN: Look into combining multiple memory allocation calls into a single invocation by pre-processing available data (Not relevant with simple data at the moment)
- VULKAN: Look into aliasing large buffers and the various functions/flags that support this
- VULKAN: Look into Push Constants for moving frequently changing values into a shader. Eg for MVP uniform buffer
- VULKAN: Look into supporting multiple descriptor sets
- ENGINE: Implement an event queue for engine events.
    This might not be needed for a while. It would be useful if there are engine threads that need to communicate back to the main engine thread
- ENGINE: Add tracking for the window resize event subscription id
    Not really necessary while there is just the one renderer and no ability to switch/regenerate it as the only time it would unregister is on shutdown when it no longer matters
- ENGINE: Add Camera destructor
- ENGINE: Add better handling for Object::cleanup() to ensure that the ObjectImpl::cleanup() is still invoked when the virtual is overriden
- ENGINE: Fix the glfw callback to shut down the engine when the window is supposed to be closed
- ENGINE: Add better handling for shutting down the engine
- ENGINE: Add better public facing handling for tracking the engine state (ie. isRunning should probably be re-exposed via a readonly variable)
- CLEANUP: Create namespaces
- PROJECT: Create dependency references for external libraries
- ENGINE: Add Engine.GetRenderer() method to allow interaction with render system
- ENGINE: Update stored pointers to be smart pointers and returned pointers from methods that don't transfer ownership to be references
- ENGINE: Move engine update method to an internal thread loop to remove the need for external implementation to call it
- ENGINE: Validate engine is threadsafe

DONE:
2024-05-22 - 2024-05-24
- ENGINE: Move GLFW initialization out of renderer and do it in the engine instead
- ENGINE: Create new bindings for GLFW events (pollEvents and callbacks) at the engine level
- VULKAN: Update the flow for recreating the framebuffer when a window size change is invoked
2024-05-16 - 2024-05-21
- ENGINE: Create singleton instance of the engine class
- ENGINE: Create scaffold for message system
2024-04-23 - 2024-04-29
- ENGINE: Implement PImpl idiom to remove internal use and private variables from public facing headers
- ENGINE: Split up the large structure file into individual classes for better clarity and maintainence
- ENGINE: Add support for the engine to inform the renderer where the shaders are located
- ENGINE: Create public headers that can be used externally for when the engine is built as a library and not an executable
- CMAKE: Setup the build to create a single library file
- CMAKE: Setup the build to no longer create an executable
- ENGINE: Remove main() method
2024-04-22 - 2024-04-22
- ENGINE: Fix deltaTime to be delta between frames, not delta since time started
2024-04-19 - 2024-04-22
- ENGINE: Fix object rotation math
- ENGINE: Fix coordinate space matrices (MVP generation)
2024-04-18 - 2024-04-19
- VULKAN: Implement OBJ model imports
2024-04-16 - 2024-04-17
- ENGINE: Update camera aspect ratio when window is resized using window resize event
- ENGINE: Implement an event for window resize in the renderer and subscribe a callback
- ENGINE: Created variadic template event class
2024-04-02 - 2024-04-16
- VULKAN: Fix SEGFAULT issue with resizing window
2024-03-30 - 2024-04-02
- VULKAN: Add for Push Constants
- VULKAN: Add MVP matrix as push content data 
- VULKAN: Add support for creating and updating object descriptor sets
- VULKAN: Update object descriptor sets to only require sampler info as positional data is handled via push constants
2024-03-11 - 2024-04-02
- ENGINE: Refactor out references to importers and hard coded values from the Vulkan renderer implementation
2024-03-26 - 2024-03-30
- VULKAN: Add support for creating textures when requested by the engine
- VULKAN: Add transform and camera render data structures
2024-03-19 - 2024-03-20
- ENGINE: Add transform component to all objects for tracking their position in a scene
- ENGINE: Add camera tracking to scenes
- ENGINE: Add base Camera class for controlling rendering at an engine level
2024-03-17 - 2024-03-19
- ENGINE: Update engine update loop to tell scenes to update instead of individual objects
- ENGINE: Add base scene class to contain objects
- ENGINE: Add base object class to contain various components
2024-03-11 - 2024-03-17
- ENGINE: Add base Renderer class for all renderers to inherit from
- CLEANUP: Move importers to their own areas in the `fileio` directory
- ENGINE: Set up defines for each major system in the API. Ie Vulkan, OBJ Import, Image Import, and anything else that could be defined as `optional`
- CMAKE: Set up conditional build defines that propagate preprocessor defines using `add_compile_definitions` for each of the optional systems
2024-03-08 - 2024-03-11
- VULKAN: Implement depth buffering
2024-03-04 - 2024-03-08
- VULKAN: Implement texture loading and mapping
2024-03-03 - 2024-03-03
- VULKAN: Implement uniform buffer
- VULKAN: Implement index buffer
- VULKAN: Implement staging buffer for CPU to GPU buffer data transfer
- VULKAN: Update queue family search method to be generic
2024-02-28 - 2024-03-02
- VULKAN: Implement vertex buffers
2024-02-28
- CMAKE: Add new CMakeList files for new subdirectories and connect them to the top level CMakeList
- CLEANUP: Move Vulkan code out of engine.cpp and organize it into its own subdirectory within /src
- CLEANUP: Move static file read methods out of engine.cpp and into a utilies.h in a /fileio subdirectory within /src
- GIT: Create git repo and upload initial files
2024-02-25 - 2024-02-27
- VULKAN: Basic triangle rendering
- VULKAN: Basic pipeline setup
2024-02-23 - 2024-02-25
- CMAKE/VSCODE: Resolve compiled project not connecting and hitting breakpoints
- CMAKE: Compilation settings and library includes
- VULKAN: Include library dependencies (GLFW, GLM)
- VULKAN: Include Vulkan SDK
- VSCODE: Intellisense setup (c_cpp_properites.json)
- VSCODE: Build and debug setup (launch.json, tasks.json)